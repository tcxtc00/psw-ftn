// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using psw_ftn.Data;

namespace psw_ftn.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220502142728_Roles")]
    partial class Roles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("psw_ftn.Models.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("psw_ftn.Models.User.UserTypes.Admin", b =>
                {
                    b.HasBaseType("psw_ftn.Models.User.User");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("psw_ftn.Models.User.UserTypes.Doctor", b =>
                {
                    b.HasBaseType("psw_ftn.Models.User.User");

                    b.Property<string>("Expertise")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("psw_ftn.Models.User.UserTypes.Patient", b =>
                {
                    b.HasBaseType("psw_ftn.Models.User.User");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("psw_ftn.Models.User.UserTypes.Admin", b =>
                {
                    b.HasOne("psw_ftn.Models.User.User", null)
                        .WithOne()
                        .HasForeignKey("psw_ftn.Models.User.UserTypes.Admin", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("psw_ftn.Models.User.UserTypes.Doctor", b =>
                {
                    b.HasOne("psw_ftn.Models.User.User", null)
                        .WithOne()
                        .HasForeignKey("psw_ftn.Models.User.UserTypes.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("psw_ftn.Models.User.UserTypes.Patient", b =>
                {
                    b.HasOne("psw_ftn.Models.User.User", null)
                        .WithOne()
                        .HasForeignKey("psw_ftn.Models.User.UserTypes.Patient", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
